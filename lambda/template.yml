AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors: 
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: AWS_IAM
        InvokeRole: NONE 
        AddDefaultAuthorizerToCorsPreflight: False

  # YbrLambdaAthenaRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties: 
  #     AssumeRolePolicyDocument: Json
  #     Description: String
  #     ManagedPolicyArns: 
  #       - String
  #     MaxSessionDuration: Integer
  #     Path: String
  #     PermissionsBoundary: String
  #     Policies: 
  #       - Policy
  #     RoleName: String
  #     Tags: 
  #       - Tag    
    
  ApplicationsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.applications
      Runtime: nodejs10.x
      CodeUri: ./applications
      Timeout: 300
      Events:
        ApplicationsAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /ybr/:ybrId/applications
            Method: GET

  ServersFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.servers
      Runtime: nodejs10.x
      CodeUri: ./servers
      Timeout: 300
      Events:
        ServersAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /ybr/:ybrId/servers
            Method: GET
  
  YbrFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.ybr
      Runtime: nodejs10.x
      CodeUri: ./ybr
      Timeout: 300
      Events:
        YbrAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /ybr/:ybrID
            Method: GET

  HelloFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.hello
      Runtime: nodejs10.x
      CodeUri: ./api
      Events:
        HelloAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /hello
            Method: GET
  
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cognito_ybr_user_pool
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cognito_ybr_client
      UserPoolId: !Ref CognitoUserPool
  
  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context, callback) => {
          event.response = { autoConfirmUser: true }
          return event
        }
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Timeout: 3

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}'

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: cognito_ybr_identity_pool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId:
            Ref: CognitoUserPoolClient
          ProviderName:
            Fn::GetAtt: [CognitoUserPool, ProviderName]

  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: [CognitoAuthRole, Arn]
        unauthenticated:
          Fn::GetAtt: [CognitoUnauthRole, Arn]

  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sam_cognito_auth_ybrAuthRole
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: CognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "execute-api:Invoke"
                Resource: "*"

  CognitoUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sam_cognito_auth_ybrUnauthRole
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: CognitoIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref MyApi

  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev/'
  
  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref CognitoUserPoolClient

  CognitoIdentityPoolId:
    Description: "Cognito Identity Pool Id"
    Value: !Ref CognitoIdentityPool